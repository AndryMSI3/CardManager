import mysql, { Pool } from "mysql2";
import fs from "fs";
import path from "path";
import dbConfig from "../config/db.config";

// Cr√©e un pool de connexions sans base de donn√©es au d√©part
const pool: Pool = mysql.createPool({
    host: dbConfig.HOST,
    user: dbConfig.USER,
    password: dbConfig.PASSWORD,
    database: dbConfig.DATABASE, // üî• Assurez-vous que cette ligne est pr√©sente
    charset: "utf8mb4",
    waitForConnections: true
});

function databaseExists(callback: (exists: boolean) => void) {
    pool.query(`SHOW DATABASES LIKE ?;`, [dbConfig.DATABASE], (err, results) => {
        if (err) {
            console.error("‚ùå Erreur lors de la v√©rification de la base :", err);
            callback(false);
            return;
        }

        if (Array.isArray(results) && results.length > 0) {
            callback(true);
        } else {
            callback(false);
        }
    });
}



// S√©lectionner la base de donn√©es
function useDatabase(callback: (err: Error | null) => void) {
    pool.query(`USE \`${dbConfig.DATABASE}\`;`, (err) => {
        if (err) {
            callback(err);
            return;
        }
        console.log(`‚úÖ Base de donn√©es "${dbConfig.DATABASE}" s√©lectionn√©e.`);
        callback(null);
    });
}

// Cr√©er la base et importer le backup si n√©cessaire
function createAndImportDatabase(callback: (err: Error | null) => void) {
    
    pool.query(
        `CREATE DATABASE IF NOT EXISTS \`${dbConfig.DATABASE}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;`,
        (err) => {
            if (err) {
                callback(err);
                return;
            }
            console.log(`‚úÖ Base de donn√©es "${dbConfig.DATABASE}" cr√©√©e.`);

            // Importer le backup
            importBackup((err) => {
                if (err) {
                    callback(err);
                    return;
                }

                // S√©lectionner la base apr√®s l'importation
                useDatabase(callback);
            });
        }
    );
}

// Importer le backup SQL
function importBackup(callback: (err: Error | null) => void) {
    const backupPath = path.join(__dirname, "../backup.sql");

    if (!fs.existsSync(backupPath)) {
        console.warn("‚ö†Ô∏è Aucun fichier backup.sql trouv√©. Ignor√©.");
        callback(null);
        return;
    }

    const sql = fs.readFileSync(backupPath, "utf8");

    pool.query(sql, [], (err) => {
        if (err) {
            callback(err);
            return;
        }
        console.log("‚úÖ Backup SQL import√© avec succ√®s !");
        callback(null);
    });
}

// Fonction pour ex√©cuter une requ√™te SQL
export function query(sql: string, params: any[], callback: (err: Error | null, result: any) => void) {

    pool.query(sql, params, (err, results) => {
        if (err) {
            callback(err, null);
            return;
        }
        callback(null, results);
    });

}

// Initialisation compl√®te
export function initializeDatabase(callback: (err: Error | null) => void) {
    databaseExists((exists) => {
        if (exists) {
            console.log("‚úÖ La base de donn√©es existe d√©j√†.");
            useDatabase(callback);
        } else {
            console.log("‚ö†Ô∏è La base de donn√©es n'existe pas. Cr√©ation en cours...");
            createAndImportDatabase(callback);
        }
    });
}

export default pool;
